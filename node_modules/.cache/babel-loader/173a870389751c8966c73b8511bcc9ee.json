{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shawntaylor/projects/auth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(registerSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(dataSaga);\n\nimport { put, call } from 'redux-saga/effects';\nimport { registerUserService, loginUserService, dataService } from '../services/authenticationService';\nimport * as types from '../actions';\nexport function registerSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function registerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(registerUserService, payload);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return [put({\n            type: types.REGISTER_USER_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: types.REGISTER_USER_ERROR,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function loginSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginUserService, payload);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return [put({\n            type: types.LOGIN_USER_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: types.LOGIN_USER_ERROR,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nexport function dataSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function dataSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(dataService, payload);\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return [put({\n            type: types.DATA_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: types.DATA_ERROR,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}","map":{"version":3,"sources":["/Users/shawntaylor/projects/auth/src/sagas/authenticationSaga.js"],"names":["registerSaga","loginSaga","dataSaga","put","call","registerUserService","loginUserService","dataService","types","payload","response","type","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","error","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","DATA_SUCCESS","DATA_ERROR"],"mappings":";;oDAKiBA,Y;qDAWAC,S;qDAWAC,Q;;AA3BjB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,WAAhD,QAAmE,mCAAnE;AAEA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AAEA,OAAO,SAAUR,YAAV,CAAuBS,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAML,IAAI,CAACC,mBAAD,EAAsBI,OAAtB,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CACJP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAEH,KAAK,CAACI,qBAAd;AAAqCF,YAAAA,QAAQ,EAARA;AAArC,WAAD,CADC,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOH,iBAAMP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAEH,KAAK,CAACK,mBAAd;AAAmCC,YAAAA,KAAK;AAAxC,WAAD,CAAT;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAUb,SAAV,CAAoBQ,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAML,IAAI,CAACE,gBAAD,EAAmBG,OAAnB,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CACJP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAEH,KAAK,CAACO,kBAAd;AAAkCL,YAAAA,QAAQ,EAARA;AAAlC,WAAD,CADC,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOH,iBAAMP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAEH,KAAK,CAACQ,gBAAd;AAAgCF,YAAAA,KAAK;AAArC,WAAD,CAAT;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAUZ,QAAV,CAAmBO,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAML,IAAI,CAACG,WAAD,EAAcE,OAAd,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CACJP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAEH,KAAK,CAACS,YAAd;AAA4BP,YAAAA,QAAQ,EAARA;AAA5B,WAAD,CADC,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOH,iBAAMP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAEH,KAAK,CAACU,UAAd;AAA0BJ,YAAAA,KAAK;AAA/B,WAAD,CAAT;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, call } from 'redux-saga/effects';\nimport { registerUserService, loginUserService, dataService } from '../services/authenticationService';\n\nimport * as types from '../actions'\n\nexport function* registerSaga(payload) {\n  try {\n    const response = yield call(registerUserService, payload);\n    yield [\n      put({ type: types.REGISTER_USER_SUCCESS, response })\n    ];\n  } catch (error) {\n    yield put({ type: types.REGISTER_USER_ERROR, error });\n  }\n}\n\nexport function* loginSaga(payload) {\n  try {\n    const response = yield call(loginUserService, payload);\n    yield [\n      put({ type: types.LOGIN_USER_SUCCESS, response })\n    ];\n  } catch (error) {\n    yield put({ type: types.LOGIN_USER_ERROR, error })\n  }\n}\n\nexport function* dataSaga(payload) {\n  try {\n    const response = yield call(dataService, payload);\n    yield [\n      put({ type: types.DATA_SUCCESS, response })\n    ];\n  } catch (error) {\n    yield put({ type: types.DATA_ERROR, error })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}